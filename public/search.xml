<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[检索数据]]></title>
    <url>%2F2018%2F08%2F02%2F%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[介绍如何使用SELECT语句从表中检索一个或多个数据列。 1、SELECT语句&nbsp;&nbsp;&nbsp;&nbsp;SQL语句由简单的英语单词构成。这些英语单词称为关键字，每个SQL语句都是用一个或多个关键字构成的。 2、检索单个列输入 SELECT prod_name FROM products;分析: 利用SELECT语句从product表中检索一个名为prod_name的列。所需的列名在SELECT关键字之后给出，FROM关键字指出从其中检索数据的表名。 SQL语句和大小写 SQL语句不区分大小写，因此SELECT与select是相同的。许多开发人员喜欢对所有SQL关键字使用大写，而对所有列和表名使用小写，这样做使代码更易于阅读和调试。使用空格 在处理SQL语句时，其中所有空格都被忽略。SQL语句可以在一行上给出，也可以分成许多行。多行易于调试。 3、检索多个列&nbsp;&nbsp;&nbsp;&nbsp;要想从一个表中检索多个列，使用相同的SELECT语句。唯一的不同是必须在SELECT关键字后给出多个列名，列名之间必须有逗号分隔。 当心逗号 在选择多个列时，一定要在列名之间加上逗号，但最后一个列名不加。 例：SELECT prod_id, prod_name, prod_price FROM products; 4、检索所有列&nbsp;&nbsp;&nbsp;&nbsp;除了指定所需的列外，SELECT语句还可以检索所有的列而不必逐个列出它们。这可以通过在实际列名的位置使用星号（）通配符来达到。例：`SELECT FROM products;` 使用通配符 一般，除非你确实需要表中的每个列，否则最好别使用*通配符。检索不需要的列通常会降低检索和应用程序的性能。 5、检索不同的行&nbsp;&nbsp;&nbsp;&nbsp;SELECT返回所有匹配的行。但是，如果你不想要每个值都出现，怎么办? 使用DISTINCT关键字，顾名思义，此关键字指示MySQL只返回不同的值。例：SELECT DISTINCT vend_id FROM products; 不能部分使用DISTINCT DISTINCT关键字应用于所有列而不仅是前置它的列。如果给出SELECT DISTINCT vend_id, prod_price, 除非指定的两个列都不同，否则所有行都将被检索出来。 6、限制结果&nbsp;&nbsp;&nbsp;&nbsp;SELECT语句返回所有匹配的行，它们可能是指定表中的每个行。为了返回第一行或前几行，可使用LIMIT子句。 例: SELECT prod_name FROM products LIMIT 5;次语句使用SELECT语句检索单个列。 LIMIT 5指示MySQL返回不多于5行。 为了得出下一个5行，可指定要检索的开始行和行数。 例：SELECT prod_name FROM products LIMIT 5,5; 分析：LIMIT 5,5指示MySQL返回从行5开始的5行。第一个数为开始位置，第二个数为要检索的行数 行0 检索出来的第一行为行0而不是行1。因此， LIMIT 1,1将检索出第二行而不是第一行。在行数不够时 LIMIT中指定要检索的行数为检索的最大行数。如果没有足够的行，MySQL将只返回的那么多行。MySQL 5的LIMIT语法 LIMIT 3,4的含义是从行3开始的4行，这容易把人搞糊涂，MySQL 5支持LIMIT的另一种替代语法。LIMIT 4 OFFSET 3意从行3开始取4行，就像LIMIT 3,4一行。 7、使用完全限定的表名例：SELECT products.prod_name FROM products; 表名也是可以完全限定的 例：SELECT products.prod_name FROM crashcourse.products;]]></content>
      <categories>
        <category>MySQL必知必会</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用MySQL]]></title>
    <url>%2F2018%2F08%2F02%2F%E4%BD%BF%E7%94%A8MySQL%2F</url>
    <content type="text"><![CDATA[1、连接为了连接到MySQL，需要以下信息： 主机名（计算机名）– 如果连接到本地MySQL服务器，为localhost； 端口（如果使用默认端口3306之外的端口） 一个合法的用户名； 用户口令 示例：1mysql -u ben -p -h myserver -P 9999 2、选择数据库在你最初连接到MySQL时，没有任何数据库打开供你使用。在你能执行任意数据库操作之前，需要选择一个数据库。为此，可使用 USE 关键字 关键字（key word）作为MySQL语言组成部分的一个保留字。绝不要用关键字命名一个表或列 示例：1USE crashcourse; 3、了解数据库和表&nbsp;&nbsp;&nbsp;&nbsp;数据库、表、列、用户、权限等的信息被存储在数据库和表中。如果不知道可以使用的数据库名时，可以使用 MySQL的 SHOW 命令来显示这些信息。 示例：1SHOW DATABASES; 为了获取一个数据库内的表的列表，使用 SHOW TABLES;示例：1SHOW TABLES; SHOW 也可以用来显示表列 SHOW COLUMNS FROM customers;DESCRIBE 语句 MySQL支持功DESCRIBE作为SHOW COLUMNS FROM的一种快捷方式。换句话说，DESCRIBE customers; 是SHOW COLUMNS FROM customers;的一种快捷方式。 所支持的其他 SHOW 语句还有： SHOW STATUS; 用于显示广泛的服务器状态信息； SHOW CREATE DATABASE 和 SHOW CREATE TABLE，分别用来显示创建特定数据库或表的MySQL语句； SHOW ERRORS 和 SHOW WARNINGS 用来显示服务错误或警告消息。]]></content>
      <categories>
        <category>MySQL必知必会</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[了解SQL]]></title>
    <url>%2F2018%2F08%2F01%2F%E4%BA%86%E8%A7%A3SQL%2F</url>
    <content type="text"><![CDATA[1、数据库基础什么是数据库&nbsp;&nbsp;&nbsp;&nbsp;数据库是一个以某种有组织的方式存储的数据集合。理解数据库的一种最简单的办法是将其想象为一个文件柜。此文件柜是一个存放数据的物理位置，不管数据是什么以及如何组织的。 数据库软件应称为DBMS（数据库管理系统）。数据库是通过DBMS创建和操纵的容器。 表&nbsp;&nbsp;&nbsp;&nbsp;在你将资料放入自己id文件柜时，并不是随便将它们扔进某个抽屉就完事了，而是在文件柜中创建文件，然后将相关的资料放入特定的文件中。 &nbsp;&nbsp;&nbsp;&nbsp;在数据库领域中，这种文件成为表。表示一种结构化的文件，可用来存储某种特定类型的数据。 表（table）某总特定类型数据的结构化清单&nbsp;&nbsp;&nbsp;&nbsp;存储在表中的数据是一种类型的数据或一个清单。决不应该将顾客的清单与订单的清单存储在同一个数据库表中。&nbsp;&nbsp;&nbsp;&nbsp;数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的。 列和数据类型表由列组成。列中存储着表中某部分信息 列（column）表中的一个字段。所有的表都是由一个或多个列组成的。 &nbsp;&nbsp;&nbsp;&nbsp;数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。 数据类型（datatype）所容许的数据的类型。每个列表都有相应的数据类型，它限制（或容许）该列中存储的数据 行&nbsp;&nbsp;&nbsp;&nbsp;表中的数据是按行存储的，所保存的每个记录存储在自己的行内。 行（row）表中的一个记录。 主键&nbsp;&nbsp;&nbsp;&nbsp;表中的每一行都应该有可以唯一表示自己的一列。 主键（primary key）一列，其值能够唯一区分表中的每个行。 表中的任何列都可以作为主键，只要它满足以下条件： 任意两行都不具有相同的主键值； 每个行都必须具有一个主键值（主键列不允许NULL值） 主键的最好的习惯： 不更新主键列中的值； 不重用主键列的值； 不再主键列中使用可能会更改的值。 什么是SQL&nbsp;&nbsp;&nbsp;&nbsp;SQL（发音为字母S-Q-L或sequel）是结构化查询语言（Structured Query Language）的缩写。SQL是一种专门用来与数据库通信的语言。]]></content>
      <categories>
        <category>MySQL必知必会</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[学习MarkDown语法 - 基本语法]]></title>
    <url>%2F2018%2F07%2F27%2F%E5%AD%A6%E4%B9%A0MarkDown%E8%AF%AD%E6%B3%95-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题, 两个#是二级标题,以此类推。支持六级标题。 示例:123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下: 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 二、字体 加粗 要把加粗的文字左右分别用两个*号包起来 斜体 要倾斜的文字左右分别用一个*号包起来 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 删除线 要加删除线的文字左右分别用两个~~号包起来 示例:1234*我是斜体***这是加粗的文字*****我是斜体加粗***~~我是删除线~~ 效果如下: 我是斜体 这是加粗的文字 我是斜体加粗 我是删除线 三、引用在引用的文字前面加&gt;即可。示例:123&gt;这是引用的内容&gt;&gt;两个引用&gt;&gt;&gt;&gt;&gt;五个引用 效果如下: 这是引用的内容 两个引用 五个引用 四、分割线三个或三个以上的-或者*都可以.示例:1234-------******* 效果如下: 五、图片语法:1![图片alt](图片地址 &quot;图片title&quot;) 示例:1![blockchain](https://niyiwei.github.io/uploads/avatar.jpeg &quot;你以为&quot;) 效果如下: 六、超链接语法:1[超链接名](超链接地址 &quot;超链接title&quot;) 示例:12[你以为](https://niyiwei.github.io &quot;你以为&quot;)[京东](https://jd.com &quot;京东商城&quot;) 效果如下: 你以为 京东 七、列表 无序列表 语法:无序列表用 -+* 任何一种都可以123- 列表一+ 列表二* 列表三 效果如下: 列表一 列表二 列表三 有序列表语法:数字加点123451 .列表内容2 .列表内容3 .列表内容注意: 序号跟内容之间要有空格 效果如下: 列表内容 列表内容 列表内容 列表嵌套 上一级和下一级之间敲三个空格 一级无序列表内容 二级无序列表内容 二级无序 二级无序 一级无序列表内容 二级无序 二级无序 一级有序列表 二级有序 二级有序 无序无序 一级有序列表 二级无序 二级无序 八、表格语法:1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 效果如下: 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 九、代码语法： 单行代码：代码之间用一个反引号包起来1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行123（```） 代码。。。（```）]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
</search>
